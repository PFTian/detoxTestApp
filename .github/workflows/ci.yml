# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: React Native CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e_android:
    runs-on: macos-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install project npm dependencies
        run: npm ci

      - name: Install JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Install JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Install emulator and create avd
        run: |
          echo '----------Install Emulator--------------'
          JAVA_HOME=$(/usr/libexec/java_home -v 1.8) $ANDROID_HOME/tools/bin/sdkmanager --install emulator
          $ANDROID_HOME/emulator/emulator -version
          echo '----------Download Images--------------'
          JAVA_HOME=$(/usr/libexec/java_home -v 1.8) $ANDROID_HOME/tools/bin/sdkmanager "system-images;android-31;default;x86_64"
          echo '----------Create AVD--------------'
          JAVA_HOME=$(/usr/libexec/java_home -v 1.8) $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_5_API_31 -d pixel --package "system-images;android-31;default;x86_64"
          echo '----------Show Available Emulators--------------'
          $ANDROID_HOME/emulator/emulator -list-avds
          echo '----------Start adb server--------------'
          JAVA_HOME=$(/usr/libexec/java_home -v 1.8) $ANDROID_HOME/platform-tools/adb start-server
          echo '----------Start Emulator--------------'
          $ANDROID_HOME/tools/emulator -port 18725 -verbose -no-window -no-audio -gpu swiftshader_indirect @Pixel_5_API_31 &
          echo '----------Show Devices--------------'
          JAVA_HOME=$(/usr/libexec/java_home -v 1.8) $ANDROID_HOME/platform-tools/adb devices
        
      #     which emulator
      #     JAVA_HOME=$(/usr/libexec/java_home -v 1.8) sdkmanager "system-images;android-31;default;x86_64"
      #     JAVA_HOME=$(/usr/libexec/java_home -v 1.8) avdmanager create avd -n Pixel_5_API_31 -d pixel --package "system-images;android-31;default;x86_64"
      #     emulator -list-avds

      - name: Show Devices
        run:
          JAVA_HOME=$(/usr/libexec/java_home -v 1.8) $ANDROID_HOME/platform-tools/adb devices

  # echo "no" | JAVA_HOME=$(/usr/libexec/java_home -v 1.8) avdmanager create avd -n Pixel_5_API_31 -d pixel --package "system-images;android-31;default;x86_64"        
  # yes | JAVA_HOME=$(/usr/libexec/java_home -v 1.8) sdkmanager "system-images;android-31;default;x86_64"
  # echo "no" | JAVA_HOME=$(/usr/libexec/java_home -v 1.8) avdmanager create avd -n Pixel_5_API_31 -d pixel --package "system-images;android-31;default;x86_64"
      - name: Detox build
        run: JAVA_HOME=$(/usr/libexec/java_home -v 11) npx detox build --configuration android.emu.debug

      - name: Boot emulator
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          echo "Starting emulator"
          $ANDROID_HOME/platform-tools/adb devices
          echo "Emulator started"

#  nohup $ANDROID_HOME/tools/bin/emulator -verbose -no-window -no-audio -gpu host @Pixel_5_API_31 &
# $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

      # - name: Run an android app
      #   run:
      #     npm run android

      - name: Detox Test
        run: |
          npm start &
          METRO_BUNDLER_PID=$!
          JAVA_HOME=$(/usr/libexec/java_home -v 11) npx detox test --configuration android.emu.debug
          DETOX_EXIT_CODE=$?
          exit $DETOX_EXIT_CODE

      # - name: Detox Test
      #   run: |
      #     npm start &
      #     METRO_BUNDLER_PID=$!
      #     npm run e2e:test android.emu.debug
      #     DETOX_EXIT_CODE=$?
      #     kill $METRO_BUNDLER_PID
      #     exit $DETOX_EXIT_CODE

      # - name: Gradle cache
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      # - name: AVD cache
      #   uses: actions/cache@v2
      #   id: avd-cache
      #   with:
      #     path: |
      #       ~/.android/avd/*
      #       ~/.android/adb*
      #     key: avd-31

      # - name: Detox test
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 31
      #     target: default
      #     arch: x86_64
      #     profile: pixel
      #     avd-name: Pixel_5_API_31
      #     script: ./gradlew connectedCheck
      
      # - run: 
      #     adb devices
      # - shell: bash
      #   run: |
      #     npm start &
      #     METRO_BUNDLER_PID=$!
      #     npm run e2e:test android.emu.debug
      #     DETOX_EXIT_CODE=$?
      #     kill $METRO_BUNDLER_PID
      #     exit $DETOX_EXIT_CODE
